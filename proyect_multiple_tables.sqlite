
/*
Multiple Tables with REBU


Suppose a ridesharing platform. For a project, with three tables:

trips - trips information
riders - users data
cars - autonomous car
*/


SELECT *FROM trips;
SELECT *FROM riders;
SELECT *FROM cars;
--What's the primary key of trips?

/*
2.
primary keys of trips
id
primary key of riders
id
primary keys of cars
id*/

/*
3.simple cross join between riders and cars 
*/
SELECT riders.first,
   riders.last,
   cars.model
FROM riders, cars;
/*
4.
Find the columns to join between trips and riders and combine the two tables using a LEFT JOIN
*/

SELECT trips.date,
    trips.pickup,
    trips.dropoff,
    trips.type,
    trips.cost,
    riders.first,
    riders.last,
    riders.username
FROM trips
LEFT JOIN riders
  ON trips.rider_id = riders.id;

/*5.Suppose we want to create a link between the trips and the cars used during those trips.
Find the columns to join on and combine the trips and cars table using an INNER JOIN
*/

SELECT *
FROM trips
JOIN cars 
  ON trips.car_id = cars.id;
/*6.The new riders data are in! There are three new users this month. Stack the riders table on top of the new table named riders2*/
SELECT *
FROM riders 
UNION
SELECT * 
FROM riders2;

/*7.What is the avg cost for a trip*/
SELECT ROUND(AVG(cost),2)
FROM trips;

/*8.REBU is looking to do an email campaign for all the irrgular users. Find all the riders who have used REBU less than 500 times */
SELECT *
FROM riders 
WHERE total_trips < 500;
/* If we want to search in both riders and riders2, then we might have to do something ike this
SELECT *
FROM riders
WHERE total_trips < 500
UNION
SELECT * 
FROM riders2
WHERE total_trips < 500;
*/
/*9. number of cars that are active */
SELECT COUNT(*)
FROM cars
WHERE status = 'active';

/*It's safety recall time for cars that have been on the road for a while.
Write a query that finds two cars that have the highest trips_completed*/

SELECT *
FROM cars
ORDER BY trips_completed DESC
LIMIT 2;